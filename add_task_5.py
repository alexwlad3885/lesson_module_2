"""
Реализуйте в отдельной функции алгоритм Евклида
(алгоритм нахождения наибольшего общего делителя (НОД) пары целых чисел),
 возвращая НОД.
 Проверить полученную функцию на списке, состоящем из 10 пар чисел
  (пример пар: [[5, 7], [21, 111], [63, 49]]).

  На первом шаге необходимо провести деление бОльшего числа на мЕньшее.
  Если деление удалось, т.е. остаток оказался равен нулю,
   то меньшее число и будет Наибольшим Общим Делителем этих двух чисел.
   В случае ненулевого остатка необходимо продолжить выполнение алгоритма.

На втором шаге необходимо разделить мЕньшее из двух данных чисел (первый делитель)
на полученный в первом делении остаток. Если при этом делении получится нулевой остаток,
 то НОД двух данных чисел равен остатку от деления на первом шаге или,
  что то же, делителю на втором шаге.
   В случае ненулевого остатка следует продолжить выполнение алгоритма.

На третьем шаге следует разделить предыдущий делитель
 (остаток от предпоследнего деления) на остаток, полученный на предыдущем шаге.
 В случае получения нулевого остатка НОД будет равен остатку,
  полученному на предыдущем шаге или, что тоже, последнему делителю.
   В случае получения ненулевого остатка повторять действия на этом шаге
    вплоть до получения нулевого остатка — в этом случае последний ненулевой остаток или,
     что то же, последний делитель и будет Наибольшим Общим Делителем.
"""


def euclids_algorithm(num1, num2):
    a_max = max([num1, num2])
    a_min = min([num1, num2])

    if a_max % a_min == 0:
        return a_min
    else:
        return euclids_algorithm(a_max % a_min, a_min)


test_list = [
    [5, 7], [21, 111], [63, 49], [231, 546], [45, 330],
    [14, 36], [36, 64], [86, 215], [364, 825], [550, 2200]
    ]

for i in range(len(test_list)):
    print("НОД пары ", test_list[i], "-  ", euclids_algorithm(test_list[i][0], test_list[i][1]))
